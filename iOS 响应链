
# iOS响应链

## 响应链的构建
在iOS中不是任何对象都能处理事件，只有继承了UIResponder的对象才能接受并处理事件，我们称之为“响应者对象”。
以下都是继承自UIResponder的，所以都能接收并处理事件：
UIApplication
UIViewController
UIView

app中，所有的视图都是按照一定的结构组织起来的，即树状层次结构，每个view都有自己的superView，包括controller的topmost view(controller的self.view)。
当一个view被add到superView上的时候，他的nextResponder属性就会被指向它的superView，当controller被初始化的时候，self.view(topmost view)的nextResponder会被指向所在的controller，而controller的nextResponder会被指向self.view的superView。
这样，整个app就通过nextResponder串成了一条链，也就是我们所说的响应链。

## 寻找响应事件的具体响应者

主要是两个方法
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event; 
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;

  整个流程：UIApplication接收到手指的事件之后，就会去调用UIWindow的hitTest:withEvent:，看看当前点击的点是不是在window内，如果是则继续依次调用subView的hitTest:withEvent:方法，直到找到最后需要的view。
  
  Hit-Test是采用递归的方法从view层级的根节点开始遍历，递归是向界面的根节点UIWindow发送hitTest:withEvent:消息开始的，从这个消息返回的是一个UIView，也就是手指当前位置最前面的那个 hittest view。 当向UIWindow发送hitTest:withEvent:消息时，hitTest:withEvent:里面所做的事，就是判断当前的点击位置是否在window里面，如果在则遍历window的subview然后依次对subview发送hitTest:withEvent:消息(注意这里给subview发送消息是根据当前subview的index顺序，index越大就越先被访问)。如果当前的point没有在view上面，那么这个view的subview也就不会被遍历了。
  
 根据需求，有时候，hittest方法里面会做一些逻辑判断，如果符合逻辑判断，就要返回需要响应时间的view，如果不符合逻辑，就要调用super hittest ，调用super hittest并不会再调回来，因为调用super只是会去从父类里面找方法，在父类里面的方法里面是系统的默认逻辑，逆序遍历subviews，然后调用subview的hittest。也就是这个super hittest的作用是让它走系统默认的流程。
 
 响应时间，找到hittest view以后，如果view实现了touches方法，那么会处理事件，如果处理不了，那么就会传给它的nextresponder，继续下去，如果一直到UIApplication都不能处理这个事件，那么这个事件会被丢弃。
 
 [一篇不错的文章](https://www.jianshu.com/p/f55b613b564e)

